#!/usr/bin/env bash
# Arguments: OLD_COMMIT NEW_COMMIT ...where both are `git describe`
# output or tag names.  The CWD will be the new deploy directory.

set -e
set -u

if ! grep -Eq 'SENTRY_DSN|SENTRY_FRONTEND_DSN' /etc/zulip/settings.py; then
    echo "sentry: No DSN configured!  Set SENTRY_DSN or SENTRY_FRONTEND_DSN in /etc/zulip/settings.py"
    exit 0
fi

if ! SENTRY_AUTH_TOKEN=$(crudini --get /etc/zulip/zulip-secrets.conf secrets sentry_release_auth_token); then
    echo "sentry: No release auth token set!  Set sentry_release_auth_token in /etc/zulip/zulip-secrets.conf"
    exit 0
fi

if ! SENTRY_ORG=$(crudini --get /etc/zulip/zulip.conf sentry organization); then
    echo "sentry: No organization set!  Set sentry.organization in /etc/zulip/zulip.conf"
    exit 0
fi

SENTRY_PROJECT=$(crudini --get /etc/zulip/zulip.conf sentry project)
SENTRY_FRONTEND_PROJECT=$(crudini --get /etc/zulip/zulip.conf sentry frontend_project)
if [ -z "$SENTRY_PROJECT" ] && [ -z "$SENTRY_FRONTEND_PROJECT" ]; then
    echo "sentry: No project set!  Set sentry.project and/or sentry.frontend_project in /etc/zulip/zulip.conf"
    exit 0
fi

if [ -n "$SENTRY_PROJECT" ] && ! grep -q 'SENTRY_DSN' /etc/zulip/settings.py; then
    echo "sentry: sentry.project is set but SENTRY_DSN is not set in /etc/zulip/settings.py"
    exit 0
fi
if [ -n "$SENTRY_FRONTEND_PROJECT" ] && ! grep -q 'SENTRY_FRONTEND_DSN' /etc/zulip/settings.py; then
    echo "sentry: sentry.frontend_project is set but SENTRY_FRONTEND_DSN is not set in /etc/zulip/settings.py"
    exit 0
fi

if ! which sentry-cli >/dev/null; then
    echo "sentry: No sentry-cli installed!"
    exit 0
fi

NEW_VERSION="$2"

MERGE_BASE=""
if [ "$(git rev-parse --is-inside-work-tree 2>/dev/null || true)" = "true" ]; then
    # Extract the merge-base that tools/cache-zulip-git-version
    # encoded into ./zulip-git-version, and turn it from a `git
    # describe` into a commit hash
    MERGE_BASE_DESCRIBED=$(head -n2 ./zulip-git-version | tail -1)
    if [[ "$MERGE_BASE_DESCRIBED" =~ ^.*-g([0-9a-f]{7,})$ ]]; then
        MERGE_BASE=$(git rev-parse "${BASH_REMATCH[1]}")
    else
        MERGE_BASE=$(git rev-parse "$MERGE_BASE_DESCRIBED")
    fi
fi

SENTRY_RELEASE="zulip-server@$NEW_VERSION"
echo "$SENTRY_RELEASE" >./sentry-release

echo "sentry: Creating release $SENTRY_RELEASE"

export SENTRY_AUTH_TOKEN

# sentry-cli only supports passing one project when making a new
# release, and we want to possibly create more than once at once.  Use
# curl to make the API request.
json=$(jq -nc '{version: $ARGS.named.version,
                projects: $ARGS.positional | map(select( . != ""))}' \
    --arg version "$SENTRY_RELEASE" \
    --args "$SENTRY_PROJECT" "$SENTRY_FRONTEND_PROJECT")
curl "https://sentry.io/api/0/organizations/$SENTRY_ORG/releases/" \
    -H "Authorization: Bearer $SENTRY_AUTH_TOKEN" \
    -H 'Content-Type: application/json' \
    -d "$json" \
    --silent -o /dev/null

if [ -n "$MERGE_BASE" ]; then
    echo "sentry: Setting commit range based on merge-base to upstream of $MERGE_BASE"
    sudo -u zulip --preserve-env=SENTRY_AUTH_TOKEN sentry-cli releases --org="$SENTRY_ORG" set-commits "$SENTRY_RELEASE" --commit="zulip/zulip@$MERGE_BASE"
fi

if [ -n "$SENTRY_FRONTEND_PROJECT" ]; then
    echo "sentry: Uploading sourcemaps"
    sentry-cli releases --org="$SENTRY_ORG" --project="$SENTRY_FRONTEND_PROJECT" files "$SENTRY_RELEASE" upload-sourcemaps static/webpack-bundles/
fi
